<?php

namespace AppBundle\Entity;

use AppBundle\AppBundle;
use Doctrine\ORM\Event\LifecycleEventArgs;
use Symfony\Component\HttpFoundation\Response;
use Guzzle\Http\Message\Request;
use  Sylius\Component\Core\Model\Product as BaseProduct;


class Product extends BaseProduct
{
    /*
     * PrePersist and PreUpdate
     */
    public function setCreatedAtValue()
    {
        $entity = $args->getEntity()->findAll();
        foreach ($entity as $entities){
            if ( $entities->getPreorder() == true){
                $this->setPreorder(false);
            }
        }
        $this->createdAt = new \DateTime();
        $this->author = "AymenLeBg";
    }


    public function setUpdatedAtValue(LifecycleEventArgs $args)
    {
        $id = $this->getId();
        $this->updatedAt = new \DateTime();
        $em2 = $args->getEntityManager();
        $em = $args->getObjectManager()->getRepository(Product::class)->findAll();
        foreach ($em as $book){
            echo "product before if \n ";
            if($book->getPreorder() == true && $book->getId() != $id){

                echo "product before set \n ";
                $book->getId();
                $book->setPreorder(false);
                $em2->persist($book);
                $em2->flush();

                echo "product after set \n ";
            }
        }
       /* $product = $this->getRepository('AppBundle:Product')
            ->findAll();
        var_dump($product);

        var_dump($entity);
        foreach ($entity as $entities){
            if ( $this->getPreorder() == true AND $this->getId() != $id){
                $this->setPreorder(false);
            }
        }
        $this->createdAt = new \DateTime();
        $this->author = "AymenLeBg";

        /*$id = $this->getId();
        $entity = $args->getEntity();
        foreach ($entity as $book){
            if ( $this->getId() != $id && $this->getPreorder() == true){
                $this->setPreorder(false);
            }
        }

        if ($this->getNew() == true){
            $productRepository = $this->container->get('sylius.repository.product');
            $bestsellers = $productRepository->findBySold();

        }

       */
    }



    /*
        Fields added on Product model
     */
    private $author;

    private $preorder;

    private $new;

    private $promo;

    private $releaseDate;
    /**
     * @return mixed
     */
    public function getAuthor()
    {
        return $this->author;
    }

    /**
     * @param mixed $author
     */
    public function setAuthor($author)
    {
        $this->author = $author;
    }


    /**
     * @return mixed
     */
    public function getPromo()
    {
        return $this->promo;
    }

    /**
     * @param mixed $promo
     */
    public function setPromo($promo)
    {
        $this->promo = $promo;
    }

    /**
     * @return mixed
     */
    public function getPreorder()
    {
        return $this->preorder;
    }

    /**
     * @param mixed $preorder
     */
    public function setPreorder($preorder)
    {
        $this->preorder = $preorder;
    }

    /**
     * @return mixed
     */
    public function getNew()
    {
        return $this->new;
    }

    /**
     * @param mixed $new
     */
    public function setNew($new)
    {
        $this->new = $new;
    }

    /**
     * @return mixed
     */
    public function getReleaseDate()
    {
        return $this->releaseDate;
    }

    /**
     * @param mixed $releaseDate
     */
    public function setReleaseDate($releaseDate)
    {
        $this->releaseDate = $releaseDate;
    }


    /**
     * @var string
     */
    private $condition;


    /**
     * Set condition
     *
     * @param string $condition
     * @return Product
     */
    public function setCondition($condition)
    {
        $this->condition = $condition;

        return $this;
    }

    /**
     * Get condition
     *
     * @return string 
     */
    public function getCondition()
    {
        return $this->condition;
    }
}
